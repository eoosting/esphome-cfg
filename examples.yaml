# turn on TFT_I2C_POWER (GPOI7) to enable i2c and display, and do it FIRST
switch:
  - platform: gpio
    restore_mode: ALWAYS_ON
    id: gpio7_tft_i2c_power
    pin: GPIO7
    setup_priority: 1100


# Example configuration entry for ESP32
i2c:
  sda: GPIO43
  scl: GPIO44
  scan: true
  id: bus_a

sensor:
  - platform: mcp9808
    name: "Temperature"
    update_interval: 60s

# Example configuration entry with 2 sensors and filter
#sensor:
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"




sensor:
  - platform: dht
    model: DHT22
    pin: 4
    temperature:
      name: "Temperature"
    humidity:
      name: "Humidity"
    update_interval: 60s


--------------
adafruit esp32s3 reverse tftp ... working display
--------------
substitutions:
  name: esphome-web-73d31c
  friendly_name: A Frame

# mostly scraped from https://www.reddit.com/r/Esphome/comments/1dlcoal/adafruit_esp32s3_reverse_tft_feather/
# https://learn.adafruit.com/esp32-s3-reverse-tft-feather/overview
# https://www.adafruit.com/product/5776 - Adafruit Sensirion SHT41 Temperature & Humidity

# check out https://community.home-assistant.io/t/adafruit-max17048-lipo-battery-gauge-with-esphome/524005/11 for max17048 code

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  platformio_options:
    board_build.flash_mode: dio
  project:
    name: esphome.web
    version: dev

esp32:
  board: adafruit_feather_esp32s3_tft 
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
- platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Set up a wifi access point
  ap: {}

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

#esp32_ble:
#  enable_on_boot: false


dashboard_import:
  package_import_url: github://esphome/example-configs/esphome-web/esp32.yaml@main
  import_full_config: true

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
#esp32_improv:
#  authorizer: none

# To have a "next url" for improv serial
web_server:

# turn on TFT_I2C_POWER (GPOI7) to enable i2c and display, and do it FIRST
switch:
  - platform: gpio
    restore_mode: ALWAYS_ON
    id: gpio7_tft_i2c_power
    pin: GPIO7
    setup_priority: 1100


spi:
  clk_pin: GPIO36
  mosi_pin: GPIO35
  miso_pin: GPIO37


i2c:
  sda: GPIO3
  scl: GPIO4
  scan: true
  id: bus_a


time:
  - platform: homeassistant
    id: esptime


sensor:
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    id: wifi_signal_pcnt
    filters:
      - lambda: return min(max(1.7 * (x + 90.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""
  - platform: sht4x
    temperature:
      name: "Temperature"
      id: myTemp
    humidity:
      name: "Humidity"
      id: myHumidity
    update_interval: 60s


text_sensor:
  - platform: wifi_info
    ip_address:
      internal: true
      id: wifi_ip_addr
    ssid:
      internal: true
      id: wifi_ssid
    mac_address:
      internal: true
      id: wifi_mac_address
    bssid:
      internal: true
      id: wifi_bssid

binary_sensor:
  # Button to cycle through pages on the display
  - platform: gpio
    pin:
      number: GPIO01
      #inverted: true
    id: button_1
    on_click:
      then:
        - display.page.show_next: my_display
        - component.update: my_display
  # Button to toggle the backlight (for use at night)
  - platform: gpio
    pin:
      number: GPIO02
      #inverted: true
    id: button_2
    on_click:
      then:
        - light.toggle: 
            id: back_light 


font:
  - file: "gfonts://Roboto"
    id: font_30
    size: 30

color:
  - id: color_black
    red: 0%
    green: 0%
    blue: 0%
    white: 0%
  - id: color_green
    red: 0%
    green: 100%
    blue: 0%
  - id: color_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: color_orange
    red: 100%
    green: 55%
    blue: 0%
  - id: color_red
    red: 100%
    green: 0%
  - id: color_white
    red: 100%
    green: 100%
    blue: 100%
  - id: color_blue
    red: 0%
    green: 0%
    blue: 100%

# Define a PWM output on the ESP32
output:
  - platform: ledc
    pin: GPIO45
    id: gpio_45_backlight_pwm

# Define a monochromatic, dimmable light for the backlight
light:
  - platform: monochromatic
    output: gpio_45_backlight_pwm
    name: "Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON

display:
  - platform: ili9xxx
    model: st7789v
    #TTGO TDisplay 135x240
    update_interval: 1s
    dimensions:
      height: 240
      width: 135
      offset_height: 40
      offset_width: 52
    # Required or the colors are all inverted, and Black screen is White
    invert_colors: true
    id: my_display
    #backlight_pin: GPIO45
    cs_pin: GPIO42
    dc_pin: GPIO40
    reset_pin: GPIO41
    #brightness: 100%
    rotation: 90

    pages:
        # Page 1: time information
        - id: page1
          lambda: |-
            it.strftime(
              0, 0,
              id(font_30),
              id(color_white),
              "%H:%M:%S", id(esptime).now()
            );
            it.printf(
              0, 60,
              id(font_30),
              id(color_white),
              TextAlign::BASELINE_LEFT,
              "T: %.1f RH: %.0f", id(myTemp).state, id(myHumidity).state
            );
            it.printf(
              0, 90,
              id(font_30),
              id(color_white),
              TextAlign::BASELINE_LEFT,
              "rssi %.1f dB %.0f %", id(wifi_signal_db).state, id(wifi_signal_pcnt).state
            );
        # Page 2: WiFi information
        - id: page2
          lambda: |-
            it.print(
              0, 0,
              id(font_30),
              id(color_white),
              "${friendly_name}"
            );
            it.printf(
              0, 30,
              id(font_30),
              id(color_white),
              "%s",
              id(wifi_ssid).state.c_str()
            );
            it.printf(
              0, 60,
              id(font_30),
              id(color_white),
              "%s",
              id(wifi_ip_addr).state.c_str()
            );
            it.printf(
              0, 90,
              id(font_30),
              id(color_white),
              "bss: %s",
              id(wifi_bssid).state.c_str()
            );
        - id: page3
          lambda: |-
            it.print(
              0, 0,
              id(font_30),
              id(color_white),
              "${friendly_name}"
            );
            it.print(
              0, 30,
              id(font_30),
              id(color_white),
              "${name}"
            );
            it.printf(
              0, 60,
              id(font_30),
              id(color_white),
              "%s",
              id(wifi_mac_address).state.c_str()
            );


--------------
lilygo t display esp32s3 ... working display
--------------

substitutions:
  name: esphome-web-e07b3c
  friendly_name: ZZ MB Source

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: dev

esp32:
  board: featheresp32
  framework:
    type: arduino


# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
- platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  # Set up a wifi access point
  ap: {}

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

esp32_ble:
  enable_on_boot: false


dashboard_import:
  package_import_url: github://esphome/example-configs/esphome-web/esp32.yaml@main
  import_full_config: true

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: none

# To have a "next url" for improv serial
web_server:

# Dipslay driver: ST7789
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19

font:
  - file: "gfonts://Roboto"
    id: font_30
    size: 30

color:
  - id: color_black
    red: 0%
    green: 0%
    blue: 0%
    white: 0%
  - id: color_green
    red: 0%
    green: 100%
    blue: 0%
  - id: color_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: color_orange
    red: 100%
    green: 55%
    blue: 0%
  - id: color_red
    red: 100%
    green: 0%
  - id: color_white
    red: 100%
    green: 100%
    blue: 100%
  - id: color_blue
    red: 0%
    green: 0%
    blue: 100%

# Define a PWM output on the ESP32
output:
  - platform: ledc
    pin: GPIO04
    id: gpio_04_backlight_pwm

# Define a monochromatic, dimmable light for the backlight
light:
  - platform: monochromatic
    output: gpio_04_backlight_pwm
    name: "Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON

display:
  - platform: ili9xxx
    model: st7789v
    #TTGO TDisplay 135x240
    update_interval: 1s
    dimensions:
      height: 240
      width: 135
      offset_height: 40
      offset_width: 52
    # Required or the colors are all inverted, and Black screen is White
    invert_colors: true
    id: my_display
    cs_pin: GPIO5
    dc_pin: GPIO16
    reset_pin: GPIO23
    #brightness: 100%
    rotation: 90

    pages:
        # Page 1: time information
        - id: page1
          lambda: |-
            it.strftime(
              0, 0,
              id(font_30),
              id(color_white),
              "%H:%M:%S", id(esptime).now()
            );
            it.printf(
              0, 90,
              id(font_30),
              id(color_white),
              TextAlign::BASELINE_LEFT,
              "T %.1f", id(myTemp).state
            );
            it.printf(
              0, 120,
              id(font_30),
              id(color_white),
              TextAlign::BASELINE_LEFT,
              "RH: %.0f", id(myHumidity).state
            );
        # Page 2: WiFi information
        - id: page2
          lambda: |-
            it.print(
              0, 0,
              id(font_30),
              id(color_white),
              "WiFi details"
            );
            it.printf(
              0, 30,
              id(font_30),
              id(color_white),
              "%s",
              id(wifi_ssid).state.c_str()
            );
            it.printf(
              0, 60,
              id(font_30),
              id(color_white),
              "%s",
              id(wifi_ip_addr).state.c_str()
            );
            it.printf(
              0, 90,
              id(font_30),
              id(color_white),
              "%.1f db",
              id(wifi_signal_db).state
            );


sensor:
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"
  - platform: dht
    model: DHT11
    pin: 22
    temperature:
      name: "Temperature"
      id: myTemp
    humidity:
      name: "Humidity"
      id: myHumidity
    update_interval: 60s
    

text_sensor:
  - platform: wifi_info
    ip_address:
      internal: true
      id: wifi_ip_addr
    ssid:
      internal: true
      id: wifi_ssid

binary_sensor:
  # Button to cycle through pages on the display
  - platform: gpio
    pin:
      number: GPIO35
      inverted: true
    id: button_1
    on_click:
      then:
        - display.page.show_next: my_display
        - component.update: my_display
  # Button to toggle the backlight (for use at night)
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
    id: button_2
    on_click:
      then:
        - light.toggle: 
            id: back_light 


time:
  - platform: homeassistant
    id: esptime

